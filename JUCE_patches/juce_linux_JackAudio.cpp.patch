diff --git a/modules/juce_audio_devices/native/juce_linux_JackAudio.cpp b/modules/juce_audio_devices/native/juce_linux_JackAudio.cpp
index 4cce7016f..cd12f3261 100644
--- a/modules/juce_audio_devices/native/juce_linux_JackAudio.cpp
+++ b/modules/juce_audio_devices/native/juce_linux_JackAudio.cpp
@@ -281,21 +281,46 @@ public:
             return lastError;
         }
 
-        lastError.clear();
-        close();
-
-        xruns.store (0, std::memory_order_relaxed);
-        juce::jack_set_process_callback (client, processCallback, this);
-        juce::jack_set_port_connect_callback (client, portConnectCallback, this);
+        lastError.clear();
+        close();
+
+        // open input ports
+        for (int i = 0; i < inputChannels.getHighestBit()+1; ++i)
+        {
+            String inputName;
+            inputName << "in_" << ++totalNumberOfInputChannels;
+
+            inputPorts.add (juce::jack_port_register (client, inputName.toUTF8(),
+                                                        JACK_DEFAULT_AUDIO_TYPE, JackPortIsInput, 0));
+        }
+
+        // open output ports
+        for (int i = 0; i < outputChannels.getHighestBit()+1; ++i)
+        {
+            String outputName;
+            outputName << "out_" << ++totalNumberOfOutputChannels;
+
+            outputPorts.add (juce::jack_port_register (client, outputName.toUTF8(),
+                                                        JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0));
+        }
+
+        inChans.calloc (totalNumberOfInputChannels + 2);
+        outChans.calloc (totalNumberOfOutputChannels + 2);
+
+        xruns.store (0, std::memory_order_relaxed);
+        juce::jack_set_process_callback (client, processCallback, this);
+        juce::jack_set_port_connect_callback (client, portConnectCallback, this);
         juce::jack_on_shutdown (client, shutdownCallback, this);
         juce::jack_on_info_shutdown (client, infoShutdownCallback, this);
         juce::jack_set_xrun_callback (client, xrunCallback, this);
-        juce::jack_activate (client);
-        deviceIsOpen = true;
-
-        if (! inputChannels.isZero())
-        {
-            forEachClientChannel (inputName, false, [&] (const char* portName, int index)
+        juce::jack_activate (client);
+        deviceIsOpen = true;
+
+        // do not auto connect!
+        /*
+        if (! inputChannels.isZero())
+        {
+            forEachClientChannel (inputName, false, [&] (const char* portName, int index)
             {
                 if (! inputChannels[index])
                     return;
@@ -310,12 +335,13 @@ public:
 
                 auto error = juce::jack_connect (client, source, juce::jack_port_name (inputPort));
                 if (error != 0)
-                    JUCE_JACK_LOG ("Cannot connect input port " + String (index) + " (" + portName + "), error " + String (error));
-            });
-        }
-
-        if (! outputChannels.isZero())
-        {
+                    JUCE_JACK_LOG ("Cannot connect input port " + String (index) + " (" + portName + "), error " + String (error));
+            });
+        }
+	*/
+
+        if (! outputChannels.isZero())
+        {
             forEachClientChannel (outputName, true, [&] (const char* portName, int index)
             {
                 if (! outputChannels[index])
@@ -494,18 +520,16 @@ private:
 
     void updateActivePorts()
     {
-        BigInteger newOutputChannels, newInputChannels;
-
-        for (int i = 0; i < outputPorts.size(); ++i)
-            if (juce::jack_port_connected (outputPorts.getUnchecked (i)))
-                newOutputChannels.setBit (i);
-
-        for (int i = 0; i < inputPorts.size(); ++i)
-            if (juce::jack_port_connected (inputPorts.getUnchecked (i)))
-                newInputChannels.setBit (i);
-
-        if (newOutputChannels != activeOutputChannels
-             || newInputChannels != activeInputChannels)
+        BigInteger newOutputChannels, newInputChannels;
+
+        for (int i = 0; i < outputPorts.size(); ++i)
+            newOutputChannels.setBit (i);
+
+        for (int i = 0; i < inputPorts.size(); ++i)
+            newInputChannels.setBit (i);
+
+        if (newOutputChannels != activeOutputChannels
+             || newInputChannels != activeInputChannels)
         {
             AudioIODeviceCallback* const oldCallback = callback;
 
